# File: main.py
"""
–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω—å —É "–ü–∞—Ä–∫ –ö—É—Ä–∫—É–ª—ñ" (python-telegram-bot v20+ API).
"""
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

from admin import BOT_TOKEN
from parsing_sites import get_kurkuli_rooms
from keyboard import main_menu_keyboard

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≥–æ—Ç–µ–ª—é '–ü–∞—Ä–∫ –ö—É—Ä–∫—É–ª—ñ'. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard()
    )

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text.startswith("üîç") or "–∫—É—Ä–∫—É–ª—ñ" in text.lower():
        await update.message.reply_text("–ó–∞—á–µ–∫–∞–π—Ç–µ, –æ—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –Ω–æ–º–µ—Ä–∏...")
        rooms = get_kurkuli_rooms()

        if not rooms:
            await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–æ–º–µ—Ä–∏.")
            return

        for room in rooms:
            msg = f"üè® {room['name']}\nüí∞ {room['price'] or '–¶—ñ–Ω—É —É—Ç–æ—á–Ω—é–π—Ç–µ'}"
            if room['available_dates']:
                msg += "\nüìÖ –í—ñ–ª—å–Ω—ñ –¥–∞—Ç–∏: " + ", ".join(room['available_dates'])
            if room['book_link']:
                msg += f"\nüîó [–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏]({room['book_link']})"

            await update.message.reply_text(msg, parse_mode="Markdown", disable_web_page_preview=True)
        return

    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å '–ü–∞—Ä–∫ –ö—É—Ä–∫—É–ª—ñ' –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ–º–µ—Ä—ñ–≤."
    )

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    logger.info("Bot started")
    app.run_polling()

if __name__ == '__main__':
    main()